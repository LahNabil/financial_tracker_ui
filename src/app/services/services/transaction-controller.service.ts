/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteTransaction } from '../fn/transaction-controller/delete-transaction';
import { DeleteTransaction$Params } from '../fn/transaction-controller/delete-transaction';
import { findAllTransactionsByBudget } from '../fn/transaction-controller/find-all-transactions-by-budget';
import { FindAllTransactionsByBudget$Params } from '../fn/transaction-controller/find-all-transactions-by-budget';
import { PageResponseTransactionDto } from '../models/page-response-transaction-dto';
import { saveTransaction } from '../fn/transaction-controller/save-transaction';
import { SaveTransaction$Params } from '../fn/transaction-controller/save-transaction';
import { TransactionDto } from '../models/transaction-dto';
import { updateTransaction } from '../fn/transaction-controller/update-transaction';
import { UpdateTransaction$Params } from '../fn/transaction-controller/update-transaction';

@Injectable({ providedIn: 'root' })
export class TransactionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTransaction()` */
  static readonly UpdateTransactionPath = '/api/v1/transaction/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTransaction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransaction$Response(params: UpdateTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<TransactionDto>> {
    return updateTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTransaction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransaction(params: UpdateTransaction$Params, context?: HttpContext): Observable<TransactionDto> {
    return this.updateTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<TransactionDto>): TransactionDto => r.body)
    );
  }

  /** Path part for operation `deleteTransaction()` */
  static readonly DeleteTransactionPath = '/api/v1/transaction/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTransaction()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTransaction$Response(params: DeleteTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTransaction$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTransaction(params: DeleteTransaction$Params, context?: HttpContext): Observable<void> {
    return this.deleteTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `saveTransaction()` */
  static readonly SaveTransactionPath = '/api/v1/transaction/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveTransaction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTransaction$Response(params: SaveTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return saveTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveTransaction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTransaction(params: SaveTransaction$Params, context?: HttpContext): Observable<string> {
    return this.saveTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findAllTransactionsByBudget()` */
  static readonly FindAllTransactionsByBudgetPath = '/api/v1/transaction/budget/{budgetId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTransactionsByBudget()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTransactionsByBudget$Response(params: FindAllTransactionsByBudget$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTransactionDto>> {
    return findAllTransactionsByBudget(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTransactionsByBudget$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTransactionsByBudget(params: FindAllTransactionsByBudget$Params, context?: HttpContext): Observable<PageResponseTransactionDto> {
    return this.findAllTransactionsByBudget$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTransactionDto>): PageResponseTransactionDto => r.body)
    );
  }

}
