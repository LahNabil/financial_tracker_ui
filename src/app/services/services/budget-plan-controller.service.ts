/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BudgetChartDataDto } from '../models/budget-chart-data-dto';
import { BudgetPlanDto } from '../models/budget-plan-dto';
import { deleteBudgetPlan } from '../fn/budget-plan-controller/delete-budget-plan';
import { DeleteBudgetPlan$Params } from '../fn/budget-plan-controller/delete-budget-plan';
import { findAllBudgets } from '../fn/budget-plan-controller/find-all-budgets';
import { FindAllBudgets$Params } from '../fn/budget-plan-controller/find-all-budgets';
import { findBudgetPlanById } from '../fn/budget-plan-controller/find-budget-plan-by-id';
import { FindBudgetPlanById$Params } from '../fn/budget-plan-controller/find-budget-plan-by-id';
import { getCurrentMonthBudgetWithTransactions } from '../fn/budget-plan-controller/get-current-month-budget-with-transactions';
import { GetCurrentMonthBudgetWithTransactions$Params } from '../fn/budget-plan-controller/get-current-month-budget-with-transactions';
import { PageResponseBudgetPlanDto } from '../models/page-response-budget-plan-dto';
import { saveBudgetPlan } from '../fn/budget-plan-controller/save-budget-plan';
import { SaveBudgetPlan$Params } from '../fn/budget-plan-controller/save-budget-plan';
import { updateBudgetPlan } from '../fn/budget-plan-controller/update-budget-plan';
import { UpdateBudgetPlan$Params } from '../fn/budget-plan-controller/update-budget-plan';

@Injectable({ providedIn: 'root' })
export class BudgetPlanControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findBudgetPlanById()` */
  static readonly FindBudgetPlanByIdPath = '/api/v1/budget/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findBudgetPlanById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBudgetPlanById$Response(params: FindBudgetPlanById$Params, context?: HttpContext): Observable<StrictHttpResponse<BudgetPlanDto>> {
    return findBudgetPlanById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findBudgetPlanById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBudgetPlanById(params: FindBudgetPlanById$Params, context?: HttpContext): Observable<BudgetPlanDto> {
    return this.findBudgetPlanById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BudgetPlanDto>): BudgetPlanDto => r.body)
    );
  }

  /** Path part for operation `updateBudgetPlan()` */
  static readonly UpdateBudgetPlanPath = '/api/v1/budget/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBudgetPlan()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBudgetPlan$Response(params: UpdateBudgetPlan$Params, context?: HttpContext): Observable<StrictHttpResponse<BudgetPlanDto>> {
    return updateBudgetPlan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBudgetPlan$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBudgetPlan(params: UpdateBudgetPlan$Params, context?: HttpContext): Observable<BudgetPlanDto> {
    return this.updateBudgetPlan$Response(params, context).pipe(
      map((r: StrictHttpResponse<BudgetPlanDto>): BudgetPlanDto => r.body)
    );
  }

  /** Path part for operation `deleteBudgetPlan()` */
  static readonly DeleteBudgetPlanPath = '/api/v1/budget/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBudgetPlan()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBudgetPlan$Response(params: DeleteBudgetPlan$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBudgetPlan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBudgetPlan$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBudgetPlan(params: DeleteBudgetPlan$Params, context?: HttpContext): Observable<void> {
    return this.deleteBudgetPlan$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAllBudgets()` */
  static readonly FindAllBudgetsPath = '/api/v1/budget/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBudgets()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBudgets$Response(params?: FindAllBudgets$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBudgetPlanDto>> {
    return findAllBudgets(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBudgets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBudgets(params?: FindAllBudgets$Params, context?: HttpContext): Observable<PageResponseBudgetPlanDto> {
    return this.findAllBudgets$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBudgetPlanDto>): PageResponseBudgetPlanDto => r.body)
    );
  }

  /** Path part for operation `saveBudgetPlan()` */
  static readonly SaveBudgetPlanPath = '/api/v1/budget/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveBudgetPlan()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBudgetPlan$Response(params: SaveBudgetPlan$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return saveBudgetPlan(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveBudgetPlan$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBudgetPlan(params: SaveBudgetPlan$Params, context?: HttpContext): Observable<string> {
    return this.saveBudgetPlan$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getCurrentMonthBudgetWithTransactions()` */
  static readonly GetCurrentMonthBudgetWithTransactionsPath = '/api/v1/budget/current-month/with-transactions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentMonthBudgetWithTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentMonthBudgetWithTransactions$Response(params?: GetCurrentMonthBudgetWithTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<BudgetChartDataDto>> {
    return getCurrentMonthBudgetWithTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentMonthBudgetWithTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentMonthBudgetWithTransactions(params?: GetCurrentMonthBudgetWithTransactions$Params, context?: HttpContext): Observable<BudgetChartDataDto> {
    return this.getCurrentMonthBudgetWithTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<BudgetChartDataDto>): BudgetChartDataDto => r.body)
    );
  }

}
